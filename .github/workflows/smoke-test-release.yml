name: Smoke test release
on:
    workflow_dispatch:
       inputs:
           release_id:
               description: 'WooCommerce Release Id'
               required: true

env:
    API_ARTIFACT: api-release--run-${{ github.run_number }}
    E2E_ARTIFACT: e2e-release--run-${{ github.run_number }}
    K6_ARTIFACT:  k6-release--run-${{ github.run_number }}
    FORCE_COLOR: 1
    BRANCH_NAME: ${{ github.ref_name }}

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    e2e-release:
        name: E2E tests on release
        runs-on: ubuntu-20.04
        env:
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
            DEFAULT_TIMEOUT_OVERRIDE: 120000
            
        steps:    
            - uses: actions/checkout@v3
              with:
                ref: ${{ env.BRANCH_NAME }}
                
            - name: Fetch Asset ID
              id: fetch_asset_id
              uses: actions/github-script@v5
              env:
                  RELEASE_ID: ${{ github.event.inputs.release_id }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  REPO: ${{ github.repository }}
              with:
                  script: |
                      const script = require( '.github/workflows/scripts/fetch-asset-id.js' )
                      await script({github, context, core})
                      
            - name: Download WooCommerce release zip
              run: |
                  curl https://api.github.com/repos/${{ github.repository }}/releases/assets/${{ steps.fetch_asset_id.outputs.asset_id }} -LJOH 'Accept: application/octet-stream'
                  unzip woocommerce.zip -d woocommerce
                  rsync -a woocommerce/woocommerce/* plugins/woocommerce/

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium
                
            - name: Launch wp-env e2e environment
              working-directory: plugins/woocommerce
              run: pnpm env:test

            - name: Run the E2E tests.
              timeout-minutes: 60
              working-directory: plugins/woocommerce
              env:
                  E2E_MAX_FAILURES: 50
              run: pnpm exec playwright test --config=tests/e2e-pw/playwright.config.js
              
            - name: Generate Playwright E2E Test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive E2E test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.E2E_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5
    
    api-release:
        name: API tests on release
        runs-on: ubuntu-20.04
        needs: [e2e-release]
        if: success() || failure()
        env:
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/api-test-report/allure-results
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/api-test-report/allure-report
        steps:
            - uses: actions/checkout@v3
              with:
                  ref: ${{ env.BRANCH_NAME }}

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false
                  
            - name: Fetch Asset ID
              id: fetch_asset_id
              uses: actions/github-script@v5
              env:
                  RELEASE_ID: ${{ github.event.inputs.release_id }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  REPO: ${{ github.repository }}
              with:
                  script: |
                      const script = require( '.github/workflows/scripts/fetch-asset-id.js' )
                      await script({github, context, core})
                      
            - name: Download WooCommerce release zip
              run: |
                  curl https://api.github.com/repos/${{ github.repository }}/releases/assets/${{ steps.fetch_asset_id.outputs.asset_id }} -LJOH 'Accept: application/octet-stream'
                  unzip woocommerce.zip -d woocommerce
                  rsync -a woocommerce/woocommerce/* plugins/woocommerce/
                  
            - name: Launch wp-env e2e environment
              working-directory: plugins/woocommerce
              run: pnpm env:test

            - name: Run API tests.
              if: success() || failure()
              working-directory: plugins/woocommerce
              env:
              #    BASE_URL: ${{ secrets.SMOKE_TEST_URL }}
              #    USER_KEY: ${{ secrets.SMOKE_TEST_ADMIN_USER }}
              #    USER_SECRET: ${{ secrets.SMOKE_TEST_ADMIN_PASSWORD }}
                  DEFAULT_TIMEOUT_OVERRIDE: 120000
              run: pnpm exec playwright test --config=tests/api-core-tests/playwright.config.js

            - name: Generate API Test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive API test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.API_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

    k6-on-release:
        name: k6 tests on release
        runs-on: ubuntu-20.04
        needs: [e2e-release]
        if: success() || failure()
        steps:
            - uses: actions/checkout@v3
              with:
                  ref: ${{ env.BRANCH_NAME }}

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium
              
            - name: Fetch Asset ID
              id: fetch_asset_id
              uses: actions/github-script@v5
              env:
                  RELEASE_ID: ${{ github.event.inputs.release_id }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  REPO: ${{ github.repository }}
              with:
                  script: |
                      const script = require( '.github/workflows/scripts/fetch-asset-id.js' )
                      await script({github, context, core})
                      
            - name: Download WooCommerce release zip
              run: |
                  curl https://api.github.com/repos/${{ github.repository }}/releases/assets/${{ steps.fetch_asset_id.outputs.asset_id }} -LJOH 'Accept: application/octet-stream'
                  unzip woocommerce.zip -d woocommerce
                  rsync -a woocommerce/woocommerce/* plugins/woocommerce/
                  
            - name: Install k6
              if: success() || failure()
              run: |
                  curl https://github.com/grafana/k6/releases/download/v0.33.0/k6-v0.33.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

            - name: Run k6 smoke tests
              if: success() || failure()
              env:
                  URL: ${{ secrets.SMOKE_TEST_PERF_URL }}
                  HOST: ${{ secrets.SMOKE_TEST_PERF_HOST }}
                  A_USER: ${{ secrets.SMOKE_TEST_PERF_ADMIN_USER }}
                  A_PW: ${{ secrets.SMOKE_TEST_PERF_ADMIN_PASSWORD }}
                  C_USER: ${{ secrets.SMOKE_TEST_PERF_ADMIN_USER }}
                  C_PW: ${{ secrets.SMOKE_TEST_PERF_ADMIN_PASSWORD }}
                  P_ID: 274
              run: |
                  ./k6 run plugins/woocommerce/tests/performance/tests/gh-action-daily-ext-requests.js
            
            - name: Generate k6 Test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive k6 test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.K6_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

    PHP-versions:
      name: PHP version ${{ matrix.php }} on release
      runs-on: ubuntu-20.04
      needs: [e2e-release]
      if: success() || failure()
      strategy:
        matrix:
          php: ['7.4', '8.0', '8.1']
      env:
        ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/allure-results
        ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/allure-report
        DEFAULT_TIMEOUT_OVERRIDE: 120000
            
      steps:
          - uses: actions/checkout@v3
            with:
                ref: trunk

          - name: Setup WooCommerce Monorepo
            uses: ./.github/actions/setup-woocommerce-monorepo
            with:
                install-filters: woocommerce
                build: false

          - name: Download and install Chromium browser.
            working-directory: plugins/woocommerce
            run: pnpm exec playwright install chromium
            
          - name: Fetch Asset ID
            id: fetch_asset_id
            uses: actions/github-script@v5
            env:
                RELEASE_ID: ${{ github.event.inputs.release_id }}
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                REPO: ${{ github.repository }}
            with:
                script: |
                    const script = require( '.github/workflows/scripts/fetch-asset-id.js' )
                    await script({github, context, core})
                      
          - name: Download WooCommerce release zip
            run: |
                curl https://api.github.com/repos/${{ github.repository }}/releases/assets/${{ steps.fetch_asset_id.outputs.asset_id }} -LJOH 'Accept: application/octet-stream'
                unzip woocommerce.zip -d woocommerce
                rsync -a woocommerce/woocommerce/* plugins/woocommerce/
                
          - name: Launch wp-env e2e environment
            working-directory: plugins/woocommerce
            env:
              WP_ENV_PHP_VERSION: ${{ matrix.php}}
            run: pnpm env:test

          - name: Run the E2E tests.
            timeout-minutes: 60
            working-directory: plugins/woocommerce
            env:
                E2E_MAX_FAILURES: 50
            run: pnpm exec playwright test --config=tests/e2e-pw/playwright.config.js

          - name: Generate Playwright E2E Test report.
            if: success() || failure()
            working-directory: plugins/woocommerce
            run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

          - name: Archive E2E test report
            if: success() || failure()
            uses: actions/upload-artifact@v3
            with:
                name: ${{ env.E2E_ARTIFACT }}
                path: |
                    ${{ env.ALLURE_RESULTS_DIR }}
                    ${{ env.ALLURE_REPORT_DIR }}
                if-no-files-found: ignore
                retention-days: 5

    WP-versions:
        name: WP version ${{ matrix.wp }} on release
        runs-on: ubuntu-20.04
        needs: [e2e-release]
        if: success() || failure()
        strategy:
          matrix:
            wp: ['6.1', '6.0.3']
        env:
          ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/allure-results
          ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/allure-report
          DEFAULT_TIMEOUT_OVERRIDE: 120000
              
        steps:
            - uses: actions/checkout@v3
              with:
                  ref: trunk

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium
              
            - name: Fetch Asset ID
              id: fetch_asset_id
              uses: actions/github-script@v5
              env:
                  RELEASE_ID: ${{ github.event.inputs.release_id }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  REPO: ${{ github.repository }}
              with:
                  script: |
                      const script = require( '.github/workflows/scripts/fetch-asset-id.js' )
                      await script({github, context, core})
                        
            - name: Download WooCommerce release zip
              run: |
                  curl https://api.github.com/repos/${{ github.repository }}/releases/assets/${{ steps.fetch_asset_id.outputs.asset_id }} -LJOH 'Accept: application/octet-stream'
                  unzip woocommerce.zip -d woocommerce
                  rsync -a woocommerce/woocommerce/* plugins/woocommerce/
                  
            - name: Launch wp-env e2e environment
              working-directory: plugins/woocommerce
              env:
                WP_ENV_CORE: WordPress/WordPress#tags/${{ matrix.wp}}
              run: pnpm env:test

            - name: Run the E2E tests.
              timeout-minutes: 60
              working-directory: plugins/woocommerce
              env:
                  E2E_MAX_FAILURES: 50
              run: pnpm exec playwright test --config=tests/e2e-pw/playwright.config.js

            - name: Generate Playwright E2E Test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive E2E test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.E2E_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5
