<?php

namespace Automattic\WooCommerce\Internal\Api\Autogenerated\RestControllers;

use \Automattic\WooCommerce\Api\Sandbox;
use Automattic\WooCommerce\Internal\Api\GraphQLController;
use Automattic\WooCommerce\Internal\RestApiControllerBase;
use Automattic\WooCommerce\Internal\Traits\AccessiblePrivateMethods;

/**
 * REST controller for API class Sandbox.
 */
class SandboxController extends RestApiControllerBase {
	use AccessiblePrivateMethods;

	protected string $route_namespace = 'wc/v4/rest';

	protected function get_rest_api_namespace(): string {
		return 'rest/Sandbox';
	}

	public function register_routes() {
		register_rest_route(
			$this->route_namespace,
			'/random_simple_type',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'Get an instance of SimpleType with random(ish)values.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_get_random_simple_type' ),
					'permission_callback' => '__return_true',
					'args'                => array(),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/random_simple_types',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'Get a few instances of SimpleType with random(ish)values.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_get_random_simple_types' ),
					'permission_callback' => '__return_true',
					'args'                => array(
						'how_many' => array(
							'description' => __( 'How many instances to get?', 'woocommerce' ),
							'type'        => 'integer',
							'context'     => array( 'view', 'edit' ),
							'readonly'    => true,
							'required'    => false,
						),
					),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/populated_simple_type',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'Get an instance of SimpleType with values populated from the input.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_get_populated_simple_type' ),
					'permission_callback' => '__return_true',
					'args'                => array(
						'input' => array(
							'type'     => 'object',
							'context'  => array( 'view', 'edit' ),
							'readonly' => true,
							'required' => true,
							// TODO: Object properties.
						),
					),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/complex_type',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'Get an instance of ComplexType with random(ish)values.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_get_random_complex_type' ),
					'permission_callback' => '__return_true',
					'args'                => array(
						'_fields_info' => array(
							'type'     => 'object',
							'context'  => array( 'view', 'edit' ),
							'readonly' => true,
							'required' => false,
						),
					),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/identifiable_objects',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'Example of query whose return type is an interface.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_get_identifiable_objects' ),
					'permission_callback' => '__return_true',
					'args'                => array(),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/recursive_type',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'Demonstration of the support for recursive types.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_get_recursive_type' ),
					'permission_callback' => '__return_true',
					'args'                => array(),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/create_simple_type',
			array(
				array(
					'methods'             => \WP_REST_Server::CREATABLE,
					'description'         => __( "(Pseudo)mutation example, it\'s supposed to perform a change in the server.", 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_create_simple_type' ),
					'permission_callback' => '__return_true',
					'args'                => array(
						'input' => array(
							'type'     => 'object',
							'context'  => array( 'view', 'edit' ),
							'readonly' => true,
							'required' => true,
							// TODO: Object properties.
						),
					),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/throw_argument_error',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'throw_argument_error query REST endpoint.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_throw_argument_error' ),
					'permission_callback' => '__return_true',
					'args'                => array(),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/throw_client_aware_error',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'throw_client_aware_error query REST endpoint.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_throw_client_aware_error' ),
					'permission_callback' => '__return_true',
					'args'                => array(),
				),
			),
		);

		register_rest_route(
			$this->route_namespace,
			'/throw_internal_error',
			array(
				array(
					'methods'             => \WP_REST_Server::READABLE,
					'description'         => __( 'throw_internal_error query REST endpoint.', 'woocommerce' ),
					'callback'            => fn( $request ) => $this->run( $request, 'run_throw_internal_error' ),
					'permission_callback' => '__return_true',
					'args'                => array(),
				),
			),
		);
	}

	public function run_get_random_simple_type( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->get_random_simple_type();
	}

	public function run_get_random_simple_types( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->get_random_simple_types( $request['how_many'] );
	}

	public function run_get_populated_simple_type( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->get_populated_simple_type( GraphQLController::resolve_type( 'GetPopulatedSimpleTypeInput' )->parseValue( $request['input'] ) );
	}

	public function run_get_random_complex_type( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->get_random_complex_type( $request['_fields_info'] );
	}

	public function run_get_identifiable_objects( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->get_identifiable_objects();
	}

	public function run_get_recursive_type( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->get_recursive_type();
	}

	public function run_create_simple_type( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->create_simple_type( GraphQLController::resolve_type( 'CreateSimpleTypeInput' )->parseValue( $request['input'] ) );
	}

	public function run_throw_argument_error( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->throw_argument_error();
	}

	public function run_throw_client_aware_error( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->throw_client_aware_error();
	}

	public function run_throw_internal_error( \WP_REST_Request $request ) {
		return wc_get_container()->get( Sandbox::class )->throw_internal_error();
	}

}

// Autogenerated file, don't modify manually!
