<?php

namespace {{namespacePascalCase}}\BlockTypes;

use Automattic\WooCommerce\Admin\Blocks\AbstractBlock;

class ExampleBlock extends AbstractBlock {

    /**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = '{{namespace}}';

	/**
	 * Block name within this namespace.
	 *
	 * @var string
	 */
	protected $block_name = 'example-block';

    /**
     * Initialize the block.
     */
    public function init() {
        parent::init();
        add_action( 'woocommerce_block_template_register', [ $this, 'add_block_to_simple_product_template' ] );
		add_action( 'admin_enqueue_scripts', [ $this, 'add_block_scripts' ] );
    }

    /**
     * Add the block to the simple product template.
     */
    public function add_block_to_simple_product_template( BlockTemplateInterface $template ) {
		if ( $template instanceof ProductFormTemplateInterface && 'simple-product' === $template->get_id() ) {
			$section = $template->get_section_by_id( 'product-catalog-section' );
			$section->add_block(
				[
					'id'         => 'example-block',
					'blockName'  => $this->get_block_type(),
					'order'      => 15,
					'attributes' => [
						'message' => __( 'My custom message', '{{textdomain}}' ),
					],
				]
			);
		}
    }

    /**
     * Add block scripts.
     */
	public function add_block_scripts() {
        $script_asset_path = $this->package->get_build_path( 'blocks/example-block/index.asset.php' );
        $script_asset      = file_exists( $script_asset_path )
            ? require $script_asset_path
            : array(
                'dependencies' => array(),
                'version'      => null,
            );

		wp_register_script(
			'{{namespace}}-example-block',
			$this->package->get_build_url( '/blocks/example-block/index.js' ),
			$script_asset['dependencies'],
            $script_asset['version'],
			true
		);
	
		wp_enqueue_script( '{{namespace}}-example-block' );
	}
}