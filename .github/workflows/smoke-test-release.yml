name: Smoke test release
on:
    release:
        types: [released, prereleased, published]
    workflow_dispatch:
        inputs:
            tag:
                description: 'WooCommerce release version'
                required: true
concurrency:
    group: ${{ github.workflow }}-${{ github.event.release.tag_name || inputs.tag }}
    cancel-in-progress: true
permissions: {}
env:
    E2E_WP_LATEST_ARTIFACT: E2E test on release smoke test site with WP Latest (run ${{ github.run_number }})
    E2E_UPDATE_WC_ARTIFACT: WooCommerce version update test on release smoke test site (run ${{ github.run_number }})
    SLACK_BLOCKS_ARTIFACT: slack-blocks

jobs:
    validate-version:
        name: Validate release version
        permissions:
            contents: read
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.validate-version.outputs.version }}
            created: ${{ steps.validate-version.outputs.created }}
            asset-id: ${{ steps.validate-version.outputs.asset-id }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Validate release version
              id: validate-version
              uses: actions/github-script@v7
              env:
                  RELEASE_VERSION: ${{ github.event.release.tag_name || inputs.tag }}
              with:
                  github-token: ${{ secrets.E2E_GH_TOKEN }}
                  script: |
                      const script = require('./.github/workflows/scripts/validate-release-version.js');
                      await script({ github, context, core });

    api-wp-latest:
        name: API on WP Latest
        runs-on: ubuntu-latest
        needs: [validate-version]
        permissions:
            contents: read
        outputs:
            result: ${{ steps.run-api-composite-action.outputs.result }}
        env:
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/api-test-report/allure-report
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/api-test-report/allure-results
            API_WP_LATEST_ARTIFACT: API test on release smoke test site with WP Latest (run ${{ github.run_number }})
        steps:
            - uses: actions/checkout@v4

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install: '@woocommerce/plugin-woocommerce...'
                  build: '@woocommerce/plugin-woocommerce'

            - name: Load docker images and start containers.
              working-directory: plugins/woocommerce
              run: pnpm --filter=@woocommerce/plugin-woocommerce env:test

            - name: Download release zip
              id: download-zip
              uses: actions/github-script@v7
              env:
                  ASSET_ID: ${{ needs.validate-version.outputs.asset-id }}
              with:
                  github-token: ${{ secrets.E2E_GH_TOKEN }}
                  script: |
                      const script = require('./.github/workflows/scripts/download-release-zip.js');
                      await script({ github, context, core });

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o ${{ env.ZIP_PATH }}
              env:
                  ZIP_PATH: ${{ steps.download-zip.outputs.zip-path }}

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Run API tests
              id: run-api-composite-action
              uses: ./.github/actions/tests/run-api-tests
              with:
                  report-name: ${{ env.API_WP_LATEST_ARTIFACT }}
              env:
                  BASE_URL: http://localhost:8086
                  USER_KEY: admin
                  USER_SECRET: password
                  UPDATE_WC: ${{ needs.validate-version.outputs.version }}
                  GITHUB_TOKEN: ${{ secrets.E2E_GH_TOKEN }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.API_WP_LATEST_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish API Allure report
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: wp-latest
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.API_WP_LATEST_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="api" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Create Slack block
              if: |
                  success() || (
                    failure() && steps.run-api-composite-action.outputs.result == 'failure'
                  )
              uses: ./.github/actions/tests/slack-summary-on-release/slack-blocks
              with:
                  test-name: WP Latest
                  api-result: ${{ steps.run-api-composite-action.outputs.result }}
                  env-slug: wp-latest
                  release-version: ${{ needs.validate-version.outputs.version }}

    e2e-wp-latest:
        name: E2E on WP Latest ${{ matrix.shard.name }}
        runs-on: ubuntu-latest
        needs: [validate-version, api-wp-latest]
        permissions:
            contents: read
        env:
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
        strategy:
            fail-fast: false
            matrix:
                shard:
                    [
                        { name: 1/5, number: 1 },
                        { name: 2/5, number: 2 },
                        { name: 3/5, number: 3 },
                        { name: 4/5, number: 4 },
                        { name: 5/5, number: 5 },
                    ]

        steps:
            - uses: actions/checkout@v4

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install: '@woocommerce/plugin-woocommerce...'
                  build: '@woocommerce/plugin-woocommerce'

            - name: Load docker images and start containers.
              working-directory: plugins/woocommerce
              run: pnpm env:test

            - name: Download release zip
              id: download-zip
              uses: actions/github-script@v7
              env:
                  ASSET_ID: ${{ needs.validate-version.outputs.asset-id }}
              with:
                  github-token: ${{ secrets.E2E_GH_TOKEN }}
                  script: |
                      const script = require('./.github/workflows/scripts/download-release-zip.js');
                      await script({ github, context, core });

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o ${{ env.ZIP_PATH }}
              env:
                  ZIP_PATH: ${{ steps.download-zip.outputs.zip-path }}

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Run E2E tests
              timeout-minutes: 60
              id: run-e2e-composite-action
              env:
                  USE_WP_ENV: 1
                  E2E_MAX_FAILURES: 15
                  FORCE_COLOR: 1
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/ignore-plugin-tests.playwright.config.js --shard ${{ matrix.shard.name }}

            - name: Upload reports to GitHub Actions Artifacts
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: all-blob-reports-${{ matrix.shard.number }}
                  path: ${{ env.ALLURE_RESULTS_DIR }}
                  retention-days: 1
                  compression-level: 9

    merge-e2e-wp-latest:
        name: Merge E2E reports for WP Latest
        if: always()
        needs: [e2e-wp-latest, validate-version]
        runs-on: ubuntu-latest
        env:
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
        steps:
            - uses: actions/checkout@v3
            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install: '@woocommerce/plugin-woocommerce...'
                  build: '@woocommerce/plugin-woocommerce'

            - name: Download blob reports from GitHub Actions Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ${{ env.ALLURE_RESULTS_DIR }}
                  pattern: all-blob-reports-*
                  run-id: e2e-tests-run
                  merge-multiple: true

            - name: Generate Test report.
              id: generate_e2e_report
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive Playwright E2E test report
              if: |
                  always() &&
                  steps.generate_e2e_report.conclusion == 'success'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ env.E2E_WP_LATEST_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.E2E_WP_LATEST_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish E2E Allure report
              if: success() || failure()
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: wp-latest
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.E2E_WP_LATEST_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="e2e" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Create Slack block
              if: |
                  success() || (
                    failure() && steps.run-e2e-composite-action.outputs.result == 'failure'
                  )
              uses: ./.github/actions/tests/slack-summary-on-release/slack-blocks
              with:
                  test-name: WP Latest
                  api-result: ${{ needs.api-wp-latest.outputs.result }}
                  e2e-result: ${{ steps.run-e2e-composite-action.outputs.result }}
                  env-slug: wp-latest
                  release-version: ${{ needs.validate-version.outputs.version }}

    test-wp-latest-1:
        name: API and E2E against WP Latest-1 ${{ matrix.shard.name }}
        runs-on: ubuntu-latest
        needs: [validate-version]
        env:
            API_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/test-results/api/allure-report
            API_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/test-results/api/allure-results
            API_WP_LATEST_X_ARTIFACT: API test on wp-env with WordPress L-1 (run ${{ github.run_number }})
            E2E_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/e2e/allure-report
            E2E_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/e2e/allure-results
            E2E_WP_LATEST_X_ARTIFACT: E2E test on wp-env with WordPress L-1 (run ${{ github.run_number }})
        permissions:
            contents: read
        strategy:
            fail-fast: false
            matrix:
                shard:
                    [
                        { name: 1/5, number: 1 },
                        { name: 2/5, number: 2 },
                        { name: 3/5, number: 3 },
                        { name: 4/5, number: 4 },
                        { name: 5/5, number: 5 },
                    ]
        steps:
            - name: Checkout WooCommerce repo
              uses: actions/checkout@v4

            - name: Get WP Latest-1 version number
              id: get-wp-latest-1
              uses: actions/github-script@v7
              with:
                  script: |
                      const { getVersionWPLatestMinusOne } = require( './plugins/woocommerce/tests/e2e-pw/utils/wordpress' );
                      await getVersionWPLatestMinusOne( { core, github } );

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install: '@woocommerce/plugin-woocommerce...'
                  build: '@woocommerce/plugin-woocommerce'

            - name: Launch WP Env
              working-directory: plugins/woocommerce
              run: pnpm env:test
              env:
                  WP_ENV_CORE: WordPress/WordPress#${{ steps.get-wp-latest-1.outputs.version }}

            - name: Download release zip
              id: download-zip
              uses: actions/github-script@v7
              env:
                  ASSET_ID: ${{ needs.validate-version.outputs.asset-id }}
              with:
                  github-token: ${{ secrets.E2E_GH_TOKEN }}
                  script: |
                      const script = require('./.github/workflows/scripts/download-release-zip.js');
                      await script({ github, context, core });

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o ${{ env.ZIP_PATH }}
              env:
                  ZIP_PATH: ${{ steps.download-zip.outputs.zip-path }}

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Run API tests
              id: run-api-composite-action
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/api-core-tests/playwright.config.js --shard ${{ matrix.shard.name }}

            - name: Generate Test report.
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.API_WP_LATEST_X_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish API Allure report
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: wp-latest-1
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.API_WP_LATEST_X_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="api" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Reset WP Env
              working-directory: plugins/woocommerce
              run: pnpm wp-env clean
              env:
                  WP_ENV_CORE: WordPress/WordPress#${{ steps.get-wp-latest-1.outputs.version }}

            - name: Run E2E tests
              timeout-minutes: 60
              id: run-e2e-composite-action
              env:
                  USE_WP_ENV: 1
                  E2E_MAX_FAILURES: 15
                  FORCE_COLOR: 1
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/ignore-plugin-tests.playwright.config.js --shard ${{ matrix.shard.name }}

            - name: Generate Test report.
              if: success() || ( failure() && steps.run-e2e-tests.conclusion == 'failure' )
              working-directory: plugins/woocommerce
              env:
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              env:
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.E2E_WP_LATEST_X_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish E2E Allure report
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: wp-latest-1
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.E2E_WP_LATEST_X_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="e2e" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Create Slack block
              if: |
                  success() || (
                    failure() && (
                      steps.run-api-composite-action.outputs.result == 'failure' ||
                      steps.run-e2e-composite-action.outputs.result == 'failure' 
                    ) 
                  )
              uses: ./.github/actions/tests/slack-summary-on-release/slack-blocks
              with:
                  test-name: WP Latest-1 (${{ steps.get-wp-latest-1.outputs.version }})
                  api-result: ${{ steps.run-api-composite-action.outputs.result }}
                  e2e-result: ${{ steps.run-e2e-composite-action.outputs.result }}
                  env-slug: wp-latest-1
                  release-version: ${{ needs.validate-version.outputs.version }}

    test-php-versions:
        name: API and E2E against PHP ${{ matrix.php_version }} ${{ matrix.shard.name }}
        runs-on: ubuntu-latest
        needs: [validate-version]
        strategy:
            fail-fast: false
            matrix:
                php_version: ['7.4', '8.1']
                shard:
                    [
                        { number: 1, name: 1/5 },
                        { number: 2, name: 2/5 },
                        { number: 3, name: 3/5 },
                        { number: 4, name: 4/5 },
                        { number: 5, name: 5/5 },
                    ]
        env:
            API_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/test-results/allure-report
            API_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/test-results/allure-results
            API_ARTIFACT: API test on wp-env with PHP ${{ matrix.php_version }} (run ${{ github.run_number }})
            E2E_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
            E2E_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
            E2E_ARTIFACT: E2E test on wp-env with PHP ${{ matrix.php_version }} (run ${{ github.run_number }})
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install: '@woocommerce/plugin-woocommerce...'
                  build: '@woocommerce/plugin-woocommerce'

            - name: Launch WP Env
              working-directory: plugins/woocommerce
              env:
                  WP_ENV_PHP_VERSION: ${{ matrix.php_version }}
              run: pnpm env:test

            - name: Verify PHP version
              working-directory: .github/workflows/scripts
              env:
                  EXPECTED_PHP_VERSION: ${{ matrix.php_version }}
              run: bash verify-php-version.sh

            - name: Download release zip
              id: download-zip
              uses: actions/github-script@v7
              env:
                  ASSET_ID: ${{ needs.validate-version.outputs.asset-id }}
              with:
                  github-token: ${{ secrets.E2E_GH_TOKEN }}
                  script: |
                      const script = require('./.github/workflows/scripts/download-release-zip.js');
                      await script({ github, context, core });

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o ${{ env.ZIP_PATH }}
              env:
                  ZIP_PATH: ${{ steps.download-zip.outputs.zip-path }}

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Run API tests
              id: run-api-composite-action
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/api-core-tests/playwright.config.js --shard ${{ matrix.shard.name }}

            - name: Generate Test report.
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.API_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish API Allure report
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: php-${{ matrix.php_version }}
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.API_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="api" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Reset WP Env
              working-directory: plugins/woocommerce
              env:
                  WP_ENV_PHP_VERSION: ${{ matrix.php_version }}
              run: pnpm wp-env clean

            - name: Run E2E tests
              timeout-minutes: 60
              id: run-e2e-composite-action
              env:
                  USE_WP_ENV: 1
                  E2E_MAX_FAILURES: 15
                  FORCE_COLOR: 1
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/ignore-plugin-tests.playwright.config.js --shard ${{ matrix.shard.name }}

            - name: Generate Test report.
              if: success() || ( failure() && steps.run-e2e-tests.conclusion == 'failure' )
              working-directory: plugins/woocommerce
              env:
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              env:
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.E2E_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish E2E Allure report
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: php-${{ matrix.php_version }}
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.E2E_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="e2e" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Create Slack block
              if: |
                  success() || (
                    failure() && (
                      steps.run-api-composite-action.outputs.result == 'failure' ||
                      steps.run-e2e-composite-action.outputs.result == 'failure' 
                    )
                  )
              uses: ./.github/actions/tests/slack-summary-on-release/slack-blocks
              with:
                  test-name: PHP ${{ matrix.php_version }}
                  api-result: ${{ steps.run-api-composite-action.outputs.result }}
                  e2e-result: ${{ steps.run-e2e-composite-action.outputs.result }}
                  env-slug: php-${{ matrix.php_version }}
                  release-version: ${{ needs.validate-version.outputs.version }}

    test-plugins:
        name: E2E With ${{ matrix.plugin }}
        runs-on: ubuntu-latest
        needs: [validate-version]
        env:
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/allure-results
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/allure-report
            ARTIFACT_NAME: E2E test on wp-env with ${{ matrix.plugin }} installed (run ${{ github.run_number }})
        strategy:
            fail-fast: false
            matrix:
                include:
                    - plugin: 'WooPayments'
                      repo: 'automattic/woocommerce-payments'
                      env_description: 'woocommerce-payments'
                    - plugin: 'WooCommerce PayPal Payments'
                      repo: 'woocommerce/woocommerce-paypal-payments'
                      env_description: 'woocommerce-paypal-payments'
                    - plugin: 'WooCommerce Shipping & Tax'
                      repo: 'automattic/woocommerce-services'
                      env_description: 'woocommerce-shipping-&-tax'
                    - plugin: 'Woo Subscriptions'
                      repo: WC_SUBSCRIPTIONS_REPO
                      private: true
                      env_description: 'woocommerce-subscriptions'
                    - plugin: 'Gutenberg'
                      repo: 'WordPress/gutenberg'
                      env_description: 'gutenberg'
                    - plugin: 'Gutenberg - Nightly'
                      repo: 'bph/gutenberg'
                      env_description: 'gutenberg-nightly'
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install: '@woocommerce/plugin-woocommerce...'
                  build: '@woocommerce/plugin-woocommerce'

            - name: Launch WP Env
              working-directory: plugins/woocommerce
              run: pnpm env:test

            - name: Download release zip
              id: download-zip
              uses: actions/github-script@v7
              env:
                  ASSET_ID: ${{ needs.validate-version.outputs.asset-id }}
              with:
                  github-token: ${{ secrets.E2E_GH_TOKEN }}
                  script: |
                      const script = require('./.github/workflows/scripts/download-release-zip.js');
                      await script({ github, context, core });

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o ${{ env.ZIP_PATH }}
              env:
                  ZIP_PATH: ${{ steps.download-zip.outputs.zip-path }}

            - name: Run 'Upload plugin' test
              id: run-upload-test
              timeout-minutes: 60
              uses: ./.github/actions/tests/run-e2e-tests
              with:
                  report-name: ${{ env.ARTIFACT_NAME }}
                  tests: upload-plugin.spec.js
              env:
                  GITHUB_TOKEN: ${{ secrets.E2E_GH_TOKEN }}
                  PLUGIN_NAME: ${{ matrix.plugin }}
                  PLUGIN_REPOSITORY: ${{ matrix.private && secrets[matrix.repo] || matrix.repo }}

            - name: Run E2E tests
              timeout-minutes: 60
              id: run-e2e-composite-action
              env:
                  USE_WP_ENV: 1
                  E2E_MAX_FAILURES: 15
                  FORCE_COLOR: 1
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/ignore-plugin-tests.playwright.config.js

            - name: Upload Allure artifacts to bucket
              if: |
                  success() || 
                  ( failure() && 
                  ( steps.run-upload-test.conclusion == 'failure' || steps.run-e2e-composite-action.conclusion == 'failure' ) )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.ARTIFACT_NAME }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish E2E Allure report
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.validate-version.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.validate-version.outputs.version }} \
                    -f artifact="${{ env.ARTIFACT_NAME }}" \
                    -f env_description="${{ matrix.env_description }}" \
                    -f test_type="e2e" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Create Slack block
              if: |
                  success() || (
                    failure() && steps.run-e2e-composite-action.outputs.result == 'failure' )
              uses: ./.github/actions/tests/slack-summary-on-release/slack-blocks
              with:
                  test-name: With ${{ matrix.plugin }}
                  e2e-result: ${{ steps.run-e2e-composite-action.outputs.result }}
                  env-slug: ${{ matrix.env_description }}
                  release-version: ${{ needs.validate-version.outputs.version }}

    post-slack-summary:
        name: Post Slack summary
        runs-on: ubuntu-latest
        permissions:
            contents: read
        if: |
            github.ref_name == 'trunk' &&
            success() || (
              failure() && contains( needs.*.result, 'failure' )
            )
        needs:
            - merge-e2e-wp-latest
            - validate-version
            - test-php-versions
            - test-plugins
            - test-wp-latest-1
        steps:
            - uses: actions/checkout@v4

            - name: Download all slack blocks
              id: download-slack-blocks
              uses: actions/download-artifact@v3
              with:
                  name: ${{ env.SLACK_BLOCKS_ARTIFACT }}
                  path: /tmp/slack-payload

            - name: Construct payload from all blocks
              id: run-payload-action
              uses: ./.github/actions/tests/slack-summary-on-release/slack-payload
              with:
                  release-version: ${{ needs.validate-version.outputs.version }}
                  blocks-dir: ${{ steps.download-slack-blocks.outputs.download-path }}

            - name: Send Slack message
              uses: slackapi/slack-github-action@v1.23.0
              with:
                  channel-id: ${{ secrets.RELEASE_TEST_SLACK_CHANNEL }}
                  payload: ${{ steps.run-payload-action.outputs.payload }}
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.E2E_SLACK_TOKEN }}
